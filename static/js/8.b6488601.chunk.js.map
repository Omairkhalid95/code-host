{"version":3,"sources":["services/ProjectService.js","constants/MyProjectAllocations.js"],"names":["projectService","getEmployeeIdFromStore","store","getState","myTeams","loggedinId","getList","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","_API_CONSTANTS$GET_PR","path","method","response","wrap","_context","prev","next","API_CONSTANTS","GET_PROJECT_LIST","service","url","concat","sent","Utils","isEmpty","abrupt","records","t0","console","error","stop","_x","apply","arguments","getListByAccountId","_ref2","_callee2","accountId","_API_CONSTANTS$GET_PR2","_context2","GET_PROJECT_LIST_BY_ACCOUNT_ID","_x2","accountList","_ref3","_callee3","_API_CONSTANTS$GET_AC","_context3","GET_ACCOUNT_LIST","_x3","getAccountListByEmpId","_ref4","_callee4","_API_CONSTANTS$ACCOUN","sortedRecords","_context4","ACCOUNTS_LIST","sortArray","_x4","getActiveAccountListByEmpId","_ref5","_callee5","_API_CONSTANTS$ALL_AC","_context5","ALL_ACTIVE_ACCOUNTS_LIST","_x5","domainList","_ref6","_callee6","_API_CONSTANTS$GET_DO","_context6","GET_DOMAIN_LIST","message","_x6","_x7","deliveryLeadsByDomainId","_ref7","_callee7","domainId","_API_CONSTANTS$GET_DE","_context7","GET_DELIVERY_LEAD_LIST_BY_DOMAIN_ID","_x8","_x9","addProject","_ref8","_callee8","payload","_API_CONSTANTS$ADD_PR","_context8","ADD_PROJECT","loginEmpId","data","_x10","updateProject","_ref9","_callee9","updateEndDates","_API_CONSTANTS$UPDATE","_context9","UPDATE_PROJECT","_objectSpread","projectId","_x11","_x12","getResourcesByProject","_ref10","_callee10","_API_CONSTANTS$GET_EM","_context10","GET_EMPLOYEE_ALLOCATION_PROJECT","_x13","_x14","addResourceToProject","_ref11","_callee11","_API_CONSTANTS$ADD_RE","_context11","ADD_RESOURCE_TO_PROJECT","_x15","updateResourceToProject","_ref12","_callee12","_API_CONSTANTS$UPDATE2","_context12","UPDATE_RESOURCE_PROJECT","_x16","updateRelease","_ref13","_callee13","_API_CONSTANTS$EMPLOY","_context13","EMPLOYEE_RELEASE","_x17","updateExtend","_ref14","_callee14","_API_CONSTANTS$UPDATE3","_context14","UPDATE_RESERVATION","prepareExtendData","_x18","updateAllocationStatus","_ref15","_callee15","_API_CONSTANTS$ADD_AL","_context15","ADD_ALLOCATION","_x19","updateBillableAllocationDetails","_ref16","_callee16","_API_CONSTANTS$UPDATE4","_context16","UPDATE_BILLABLE_DETAILS","_x20","engageProjectResource","_ref17","_callee17","employeeData","resp","_context17","createPayloadForEngageAndReleaseResource","statusCode","status","_x21","deleteResourceFromProject","_ref18","_callee18","_API_CONSTANTS$DELETE","_context18","DELETE_RESOURCE_FROM_PROJECT","_x22","prepareEmployeeReleaseData","values","selectedResource","_selectedResource$res","_selectedResource$res2","_selectedResource$par","employeeId","reservedFor","parentAccount","assignedLevel","feedback","comments","releaseFeedbackReason","startDate","moment","format","NEW_DATE_FORMAT","valueOf","notes","prepareAddAllocationPayload","_selectedResource$res3","subDomainId","reservedForAccountId","allocationStatus","futureAllocationReleaseDate","nextAllocationStartDate","createPayloadForAddProjectToResourceAPI","formData","selectedProject","_formData$emp","_formData$onBehalf","_formData$billableDat","billableDate","_formData$billableDat2","_slicedToArray","endDate","id","emp","onBehalfOf","onBehalf","billableStatus","billingEndDate","Date","resourceRole","assignedRole","billingStartDate","subDomain","subdomain","domain","createPayloadForAPI","formValues","accountsList","accountName","projectName","projectStatus","projectStartDate","projectEndDate","account","find","x","managerIds","createPayloadForReleaseResourceAPI","releaseResourceFromProject","_ref19","_callee19","_API_CONSTANTS$RELEAS","_context19","RELEASE_RESOURCE","_x23","allocationList","_callee20","_API_CONSTANTS$PROJEC","_context20","PROJECT_ALLOCATIONS","prepareAllocationEndDate","field","record","allocationDate","key","PROJECT_ALLOCATION_TABLE","PROJECT_START_DATE","ALLOCATION_SUB_STATUS","SHADOW","END_DATE_KEY","RESERVED_DATE","RESERVED","EXTENDED_DATE","END_DATE","DATE_FORMAT","flatRecords","map","item","_item$project","_item$accountData","_item$clientDeliveryH","project","accountData","clientDeliveryHead","employeeName","shift","empActiveInd","activeInd","ALLOCATION_STATUS","active","InActive","sortArrayByDate","getReasonReserve","_callee21","_API_CONSTANTS$GET_RE","_context21","GET_REASON_FEEDBACK","uploadProjectFile","_ref22","_callee22","file","res","_context22","get","UPLOAD_PROJECT_FILE","_x24","LABELS","DELIVERY_LEADS","PROJECT_NAME","PROJECT_TITLE","CLIENT_DELIVERY_HEAD","label","type","ACCOUNT_NAME","DELIVERY_LEAD","PROJECT_END_DATE","SHIFT_TIMING","RESOURCE_STATUS","options","value","TEAM_DETAILS_TABLE","EMPLOYEE_ID","EMPLOYEE_NAME","ROLE","DESIGNATION","BILLABILITY"],"mappings":"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","file":"static/js/8.b6488601.chunk.js","sourcesContent":["import service from \"auth/FetchInterceptor\";\nimport API_CONSTANTS from \"constants/ApiConstant\";\nimport Utils from \"utils\";\nimport moment from \"moment\";\nimport store from \"redux/store\";\nimport { ALLOCATION_STATUS, END_DATE_KEY, PROJECT_ALLOCATION_TABLE } from \"constants/MyProjectAllocations\";\nimport { DATE_FORMAT, NEW_DATE_FORMAT } from \"constants/CommonConstants\";\nimport { SHADOW, RESERVED } from \"../constants/CommonConstants\";\n\nimport { get } from \"auth/FetchApiInterceptor\";\nconst projectService = {};\nconst getEmployeeIdFromStore = () => {\n  return store.getState().myTeams.loggedinId;\n};\n\nprojectService.getList = async function (params) {\n  const { path, method } = API_CONSTANTS.GET_PROJECT_LIST;\n  if (getEmployeeIdFromStore()) {\n    try {\n      const response = await service({\n        url: `${path}${getEmployeeIdFromStore()}`,\n        method,\n        params,\n      });\n      if (Utils.isEmpty(response)) {\n        return [];\n      }\n      return response.records;\n    } catch (e) {\n      console.error(\"Error in getting the domain list.\", e);\n    }\n  }\n};\n\nprojectService.getListByAccountId = async function (accountId) {\n  const { path, method } = API_CONSTANTS.GET_PROJECT_LIST_BY_ACCOUNT_ID;\n  if (getEmployeeIdFromStore()) {\n    try {\n      const response = await service({\n        url: `${path}${accountId}/?includeBenchProjects=false`,\n        method,\n      });\n      if (Utils.isEmpty(response)) {\n        return [];\n      }\n      return response.records;\n    } catch (e) {\n      console.error(\"Error in getting the domain list.\", e);\n    }\n  }\n};\n\nprojectService.accountList = async function (params) {\n  const { path, method } = API_CONSTANTS.GET_ACCOUNT_LIST;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      params,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response.records;\n  } catch (e) {\n    console.error(\"Error in getting the domain list.\", e);\n  }\n};\n\nprojectService.getAccountListByEmpId = async function (params) {\n  const { path, method } = API_CONSTANTS.ACCOUNTS_LIST;\n  if (getEmployeeIdFromStore()) {\n    try {\n      const response = await service({\n        url: `${path}${getEmployeeIdFromStore()}`,\n        method,\n        params,\n      });\n      if (Utils.isEmpty(response)) {\n        return [];\n      }\n      const sortedRecords = Utils.sortArray(response.records, [\"accountName\"]);\n      return sortedRecords;\n    } catch (e) {\n      console.error(\"Error in getting the Accounts List.\", e);\n    }\n  }\n};\nprojectService.getActiveAccountListByEmpId = async function (params) {\n  const { path, method } = API_CONSTANTS.ALL_ACTIVE_ACCOUNTS_LIST;\n  if (getEmployeeIdFromStore()) {\n    try {\n      const response = await service({\n        url: `${path}${getEmployeeIdFromStore()}`,\n        method,\n        params,\n      });\n      if (Utils.isEmpty(response)) {\n        return [];\n      }\n      const sortedRecords = Utils.sortArray(response.records, [\"accountName\"]);\n      return sortedRecords;\n    } catch (e) {\n      console.error(\"Error in getting the Accounts List.\", e);\n    }\n  }\n};\n\nprojectService.domainList = async function (accountId, params) {\n  const { path, method } = API_CONSTANTS.GET_DOMAIN_LIST;\n  try {\n    const response = await service({\n      url: `${path}${accountId}`,\n      method,\n      params,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response;\n  } catch (e) {\n    console.error(\"Error in getting the domain list.\", e?.message || e);\n  }\n};\n\nprojectService.deliveryLeadsByDomainId = async function (domainId, params) {\n  const { path, method } = API_CONSTANTS.GET_DELIVERY_LEAD_LIST_BY_DOMAIN_ID;\n  try {\n    const response = await service({\n      url: `${path}${domainId}`,\n      method,\n      params,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response.records;\n  } catch (e) {\n    console.error(\"Error in getting the domain list.\", e?.message || e);\n  }\n};\n\nprojectService.addProject = async function (payload) {\n  const { path, method } = API_CONSTANTS.ADD_PROJECT;\n  try {\n    const params = { loginEmpId: getEmployeeIdFromStore() };\n\n    const response = await service({\n      url: path,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n\nprojectService.updateProject = async function (payload, updateEndDates) {\n  const { path, method } = API_CONSTANTS.UPDATE_PROJECT;\n  try {\n    const params = { loginEmpId: getEmployeeIdFromStore(), ...updateEndDates };\n    const response = await service({\n      url: `${path}${payload.projectId}`,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n\nprojectService.getResourcesByProject = async function (projectId, params) {\n  const { path, method } = API_CONSTANTS.GET_EMPLOYEE_ALLOCATION_PROJECT;\n  try {\n    const response = await service({\n      url: `${path}${projectId}`,\n      method,\n      params,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response.records;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n/** ------------------------------ */\n/** POST API: Add Resource to Project */\n/** ------------------------------ */\nprojectService.addResourceToProject = async function (payload) {\n  const params = { loginEmpId: getEmployeeIdFromStore() };\n  const { path, method } = API_CONSTANTS.ADD_RESOURCE_TO_PROJECT;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nprojectService.updateResourceToProject = async function (payload) {\n  const params = { loginEmpId: getEmployeeIdFromStore() };\n  const { path, method } = API_CONSTANTS.UPDATE_RESOURCE_PROJECT;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\nprojectService.updateRelease = async function (payload) {\n  const { path, method } = API_CONSTANTS.EMPLOYEE_RELEASE;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nprojectService.updateExtend = async function (payload) {\n  const { path, method } = API_CONSTANTS.UPDATE_RESERVATION;\n  try {\n    const data = prepareExtendData(payload);\n    const response = await service({\n      url: path,\n      method,\n      data,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nprojectService.updateAllocationStatus = async function (payload) {\n  const { path, method } = API_CONSTANTS.ADD_ALLOCATION;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response;\n  } catch (e) {\n    console.error(\"Error while adding allocation for resource.\", e);\n    throw e;\n  }\n};\n\nprojectService.updateBillableAllocationDetails = async function (payload) {\n  const { path, method } = API_CONSTANTS.UPDATE_BILLABLE_DETAILS;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response;\n  } catch (e) {\n    console.error(\"Error while adding allocation for resource.\", e);\n    throw e;\n  }\n};\n\nprojectService.engageProjectResource = async function (employeeData) {\n  const payload = createPayloadForEngageAndReleaseResource(employeeData);\n  const response = await projectService.updateResourceToProject({ ...payload });\n  if (response.statusCode === 801) {\n    const resp = await projectService.updateResourceToProject({ ...payload, status: \"Engaged\" });\n    return resp;\n  }\n};\n\nprojectService.deleteResourceFromProject = async function (payload) {\n  const { path, method } = API_CONSTANTS.DELETE_RESOURCE_FROM_PROJECT;\n  try {\n    const params = { loginEmpId: getEmployeeIdFromStore() };\n    const response = await service({\n      url: path,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nprojectService.prepareEmployeeReleaseData = (values, selectedResource) => {\n  return {\n    employeeId: selectedResource?.employeeId,\n    accountId: selectedResource?.reservedFor?.accountId\n      ? selectedResource?.reservedFor?.accountId\n      : selectedResource?.parentAccount?.accountId,\n    assignedLevel: selectedResource?.assignedLevel,\n    feedback: values?.comments,\n    releaseFeedbackReason: values?.releaseFeedbackReason,\n    startDate: values?.startDate ? moment(values?.startDate).format(NEW_DATE_FORMAT).valueOf() : null,\n    notes: values.notes,\n  };\n};\nprojectService.prepareAddAllocationPayload = (values, selectedResource) => ({\n  employeeId: selectedResource?.employeeId,\n  projectId: values?.projectId,\n  domainId: values?.domainId,\n  subDomainId: values?.subDomainId,\n  reservedForAccountId: selectedResource?.reservedFor?.accountId,\n  allocationStatus: values?.allocationStatus,\n  assignedLevel: selectedResource?.assignedLevel,\n  startDate: values?.startDate ? moment(values?.startDate).format(NEW_DATE_FORMAT).valueOf() : null,\n  futureAllocationReleaseDate: values?.futureAllocationReleaseDate\n    ? moment(values?.futureAllocationReleaseDate).format(NEW_DATE_FORMAT).valueOf()\n    : null,\n  notes: values.notes,\n  nextAllocationStartDate: values?.nextAllocationStartDate\n    ? moment(values?.nextAllocationStartDate).format(NEW_DATE_FORMAT).valueOf()\n    : null,\n});\n\nconst prepareExtendData = data => {\n  return {\n    comments: data?.comments,\n    accountId: data?.accountId,\n    employeeId: data?.employeeId,\n    notes: data?.notes,\n  };\n};\n\n/** ------------------------------ */\n/** PUT & POST Utilty method for creating payload for AddResourceToProject */\n/** ------------------------------ */\nprojectService.createPayloadForAddProjectToResourceAPI = function (formData, selectedProject, selectedResource) {\n  const [startDate, endDate] = formData?.billableDate;\n  return {\n    id: selectedResource?.id || \"\",\n    employeeId: formData?.emp?.employeeId,\n    onBehalfOf: formData?.onBehalf?.employeeId,\n    projectId: selectedProject?.projectId,\n    billableStatus: formData?.billableStatus,\n    billingEndDate: new Date(endDate),\n    resourceRole: formData?.assignedRole,\n    billingStartDate: new Date(startDate),\n    status: formData?.allocationStatus,\n    subDomain: formData?.subdomain,\n  };\n};\n\nconst createPayloadForEngageAndReleaseResource = selectedResource => {\n  return {\n    id: selectedResource?.id || \"\",\n    employeeId: selectedResource?.employeeId,\n    onBehalfOf: selectedResource?.onBehalf,\n    projectId: selectedResource?.projectId,\n    billableStatus: selectedResource?.billableStatus,\n    billingEndDate: new Date(moment(selectedResource?.billingEndDate)),\n    resourceRole: selectedResource?.resourceRole,\n    billingStartDate: new Date(moment(selectedResource?.billingStartDate)),\n    status: selectedResource?.status,\n    subDomain: selectedResource?.subDomain,\n    domain: selectedResource?.domain,\n  };\n};\n\nprojectService.createPayloadForAPI = (formValues, accountsList, selectedProject) => {\n  const { accountName, projectName, projectStatus, projectStartDate, projectEndDate } = formValues;\n  const account = accountsList.find(x => x.accountId === accountName || x.accountName === accountName);\n  return {\n    projectId: selectedProject?.projectId || \"\",\n    projectName,\n    account: account?.accountName,\n    accountId: account?.accountId,\n    managerIds: [],\n    status: projectStatus,\n    projectStartDate: projectStartDate ? moment(projectStartDate).format(NEW_DATE_FORMAT).valueOf() : null,\n    projectEndDate: projectEndDate ? moment(projectEndDate).format(NEW_DATE_FORMAT).valueOf() : null,\n  };\n};\n\nconst createPayloadForReleaseResourceAPI = selectedResource => {\n  const { id, employeeId, projectId, billableStatus, billingEndDate, billingStartDate, resourceRole } =\n    selectedResource;\n  return {\n    id,\n    employeeId,\n    projectId,\n    billableStatus,\n    billingEndDate,\n    resourceRole,\n    billingStartDate,\n  };\n};\n\nprojectService.releaseResourceFromProject = async function (data) {\n  const { path, method } = API_CONSTANTS.RELEASE_RESOURCE;\n  try {\n    const params = { loginEmpId: getEmployeeIdFromStore() };\n    const payload = createPayloadForReleaseResourceAPI(data);\n    const response = await service({\n      url: path,\n      method,\n      params,\n      data: payload,\n    });\n    if (Utils.isEmpty(response)) {\n      return null;\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n  }\n};\nprojectService.allocationList = async function () {\n  const { path, method } = API_CONSTANTS.PROJECT_ALLOCATIONS;\n  const params = { employeeId: getEmployeeIdFromStore() };\n  try {\n    let response;\n    if (params.employeeId) {\n      response = await service({\n        url: `${path}/${params.employeeId}`,\n        method,\n      });\n    }\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response.records;\n  } catch (e) {\n    console.error(\"Error in getting the allocation list.\", e);\n  }\n};\nprojectService.prepareAllocationEndDate = (field, record) => {\n  let allocationDate = \"\";\n  if (field.key === PROJECT_ALLOCATION_TABLE.PROJECT_START_DATE.key) {\n    allocationDate = record[field.key] || \"\";\n  } else {\n    if (record[\"empActiveInd\"]) {\n      if (record[PROJECT_ALLOCATION_TABLE.ALLOCATION_SUB_STATUS.key] === SHADOW) {\n        allocationDate = record[END_DATE_KEY.RESERVED_DATE] || \"\";\n      } else if (record[PROJECT_ALLOCATION_TABLE.ALLOCATION_SUB_STATUS.key] === RESERVED) {\n        allocationDate = record[END_DATE_KEY.EXTENDED_DATE]\n          ? record[END_DATE_KEY.EXTENDED_DATE]\n          : record[END_DATE_KEY.RESERVED_DATE];\n      }\n    } else {\n      allocationDate = record[END_DATE_KEY.END_DATE];\n    }\n  }\n  return allocationDate ? moment(allocationDate).format(DATE_FORMAT) : allocationDate;\n};\nprojectService.flatRecords = record => {\n  const data = record.map(item => {\n    return {\n      ...item,\n      projectName: item?.project?.projectName,\n      accountName: item?.accountData?.accountName,\n      clientDeliveryHead: item?.clientDeliveryHead?.employeeName,\n      shift: item?.shift,\n      empActiveInd: item?.activeInd,\n      activeInd: item?.activeInd ? ALLOCATION_STATUS.active : ALLOCATION_STATUS.InActive,\n    };\n  });\n  return Utils.sortArrayByDate(data, \"startDate\");\n};\nprojectService.getReasonReserve = async function () {\n  const { path, method } = API_CONSTANTS.GET_REASON_FEEDBACK;\n  try {\n    const response = await service({\n      url: path,\n      method,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response.records;\n  } catch (e) {\n    console.error(\"Error in getting the getting feedback reasons list.\", e);\n  }\n};\n//upload project to be continued from here\n\nprojectService.uploadProjectFile = async file => {\n  const res = await get(API_CONSTANTS.UPLOAD_PROJECT_FILE, file);\n  return res;\n};\n\nexport default projectService;\n","export const LABELS = {\n  DELIVERY_LEADS: \"common.label.deliverylead\",\n  PROJECT_NAME: \"common.label.projectname\",\n  PROJECT_TITLE: \"component.projectallocation.teamdetails.label\",\n  CLIENT_DELIVERY_HEAD: \"component.account.clientdeliveryhead\",\n};\n\nconst ACTIVE_STATUS = { label: \"component.common.status.active\", value: \"Active\" };\nconst INACTIVE_STATUS = { label: \"component.common.status.inactive\", value: \"In Active\" };\nexport const PROJECT_ALLOCATION_TABLE = {\n  PROJECT_NAME: {\n    label: \"common.label.projectname\",\n    key: \"projectName\",\n    type: \"text\",\n  },\n  ACCOUNT_NAME: {\n    label: \"common.label.accountname\",\n    key: \"accountName\",\n    type: \"text\",\n  },\n  DELIVERY_LEAD: {\n    label: \"common.label.clientDeliveryHead\",\n    key: \"clientDeliveryHead\",\n    type: \"text\",\n  },\n  ALLOCATION_SUB_STATUS: {\n    label: \"component.manage.projects.allocationstatus.lablel\",\n    key: \"allocationStatus\",\n    type: \"text\",\n  },\n  PROJECT_START_DATE: {\n    label: \"component.common.start.date\",\n    key: \"startDate\",\n    type: \"date\",\n  },\n  PROJECT_END_DATE: {\n    label: \"common.label.end.date\",\n    key: \"endDate\",\n    type: \"date\",\n  },\n  SHIFT_TIMING: {\n    label: \"component.myprojectallocations.shift.heading\",\n    key: \"shift\",\n    type: \"text\",\n  },\n  RESOURCE_STATUS: {\n    label: \"common.label.status\",\n    key: \"activeInd\",\n    type: \"select\",\n    options: [{ ...ACTIVE_STATUS }, { ...INACTIVE_STATUS }],\n  },\n};\n\nexport const TEAM_DETAILS_TABLE = {\n  EMPLOYEE_ID: {\n    label: \"common.label.employeeId\",\n    key: \"employeeId\",\n    type: \"text\",\n  },\n  EMPLOYEE_NAME: {\n    label: \"common.label.employeeName\",\n    key: \"employeeName\",\n    type: \"text\",\n  },\n  ROLE: {\n    label: \"component.projectallocation.role.label\",\n    key: \"role\",\n    type: \"text\",\n  },\n  DESIGNATION: {\n    label: \"common.label.designation\",\n    key: \"designation\",\n    type: \"text\",\n  },\n  BILLABILITY: {\n    label: \"component.manage.projects.allocationstatus.lablel\",\n    key: \"allocationStatus\",\n    type: \"text\",\n  },\n};\n\nexport const ALLOCATION_STATUS = { active: \"Active\", InActive: \"In Active\" };\n\nexport const END_DATE_KEY = {\n  RESERVED_DATE: \"defaultReservedEndDate\",\n  END_DATE: \"endDate\",\n  EXTENDED_DATE: \"extendedReservedEndDate\",\n};\n"],"sourceRoot":""}