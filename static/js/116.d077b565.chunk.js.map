{"version":3,"sources":["components/shared-components/DonutChartWidget/index.js","components/shared-components/RegiondataWidget/index.js","components/shared-components/StatisticWidget/index.js","views/app-views/dashboard/regional-widget/regionalWidgetComp.jsx","constants/ChartConstant.js"],"names":["defaultOption","apexPieChartDefaultOption","Chart","props","_jsx","ApexChart","_objectSpread","DonutChartWidget","series","customOptions","labels","width","height","title","extra","bodyClass","loader","options","plotOptions","pie","donut","total","label","show","Card","style","border","children","_jsxs","className","concat","length","type","Skeleton","active","defaultProps","useBreakpoint","Grid","mapColor","getHighlightedRegion","name","data","i","elm","color","getRegionHoverColor","utils","shadeColor","MapChart","_ref","setTooltipContent","mapSource","mapType","handleOnChangeRegion","ComposableMap","transform","projectionConfig","scale","Geographies","geography","_ref2","geographies","map","geo","geoName","properties","NAME_1","Geography","onClick","e","includes","param","location","account","handleChange","onMouseEnter","value","getRegionValue","onMouseLeave","fill","stroke","hover","outline","rsmKey","Map","onChange","_useState","useState","_useState2","_slicedToArray","content","setContent","_Fragment","ReactTooltip","renderDataList","Badge","RegiondataWidget","list","flag","_useState3","_useState4","allocationData","setAllocationData","_useState5","_useState6","allocationLabel","setAllocationLabel","regionsDesc","useSelector","state","myTeams","regionDesc","regions","regionData","allocations","globalMap","globalMapData","_useState7","_useState8","mapRegions","setMapRegions","dispatch","useDispatch","useEffect","newRegions","prepareRegionsColors","setGlobalMapData","_allocations$allocati","Number","allocationLabels","index","COLORS","isMobile","getBreakPoint","newData","arr","_toConsumableArray","dataForChart","bodyStyle","padding","Row","Col","xs","sm","md","lg","justifyContent","count","Button","SyncOutlined","shape","description","minHeight","colors","justify","maxWidth","Flex","alignItems","WorldMap","StatisticWidget","status","subtitle","prefix","Typography","Title","level","ellipsis","tooltip","ArrowUpOutlined","ArrowDownOutlined","RegionalWidgetComp","setLoader","globalTrends","setFlag","globalFlag","_state$myTeams","_state$myTeams$region","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","response","headCountTrends","wrap","_context","prev","next","dashboardServices","getRegionalData","sent","setGlobalTrend","setRegionData","setRegionDescData","t0","console","error","finish","stop","_x","apply","arguments","React","Fragment","gutter","xl","subTitle","Array","keys","id","key","Avatar","size","src","getFlag","COLOR_1","COLOR_2","COLOR_3","COLOR_4","COLOR_5","COLOR_8","apexLineChartDefaultOption","chart","zoom","enabled","toolbar","dataLabels","curve","lineCap","legend","position","horizontalAlign","offsetY","itemMargin","vertical","tooltipHoverFormatter","val","opts","w","globals","seriesIndex","dataPointIndex","xaxis","categories","grid","lines","yaxis","showAlways","fontSize","fontFamily","fontWeight","formatter","seriesTotals","reduce","a","b"],"mappings":"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","file":"static/js/116.d077b565.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Skeleton } from \"antd\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport { apexPieChartDefaultOption } from \"constants/ChartConstant\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst defaultOption = apexPieChartDefaultOption;\r\n\r\nconst Chart = props => {\r\n  return <ApexChart {...props} />;\r\n};\r\n\r\nconst DonutChartWidget = props => {\r\n  const { series, customOptions, labels, width, height, title, extra, bodyClass, loader } = props;\r\n  let options = defaultOption;\r\n  options.labels = labels;\r\n  options.plotOptions.pie.donut.labels.total.label = title;\r\n  if (!title) {\r\n    options.plotOptions.pie.donut.labels.show = false;\r\n  }\r\n  if (customOptions) {\r\n    options = { ...options, ...customOptions };\r\n  }\r\n  return (\r\n    <Card style={{ border: \"none\" }}>\r\n      <div className={`text-center ${bodyClass}`}>\r\n        {!!series.length && !loader ?\r\n          <Chart type=\"donut\" options={options} series={series} width={width} height={height} />\r\n          :\r\n          <Skeleton active />\r\n        }\r\n        {extra}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nDonutChartWidget.propTypes = {\r\n  series: PropTypes.array.isRequired,\r\n  labels: PropTypes.array,\r\n  title: PropTypes.string,\r\n  extra: PropTypes.element,\r\n  bodyClass: PropTypes.string,\r\n};\r\n\r\nDonutChartWidget.defaultProps = {\r\n  series: [],\r\n  labels: [],\r\n  title: \"\",\r\n  height: 250,\r\n  width: \"100%\",\r\n};\r\n\r\nexport default DonutChartWidget;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Row, Col, Badge, Grid, Skeleton, Button } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport WorldMap from \"assets/maps/world-countries-sans-antarctica.json\";\r\nimport utils from \"utils\";\r\nimport Flex from \"../Flex\";\r\nimport DonutChartWidget from \"../DonutChartWidget\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setGlobalMapData } from \"redux/actions\";\r\nimport { COLORS } from \"constants/ChartConstant\";\r\n\r\nconst { useBreakpoint } = Grid;\r\nconst geoUrl = WorldMap;\r\nconst mapColor = \"#F5F4F6\";\r\nconst hoverPercentage = -10;\r\n\r\nconst getHighlightedRegion = (name, data) => {\r\n  if (data.length > 0 || name) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      const elm = data[i];\r\n      if (name === elm.name) {\r\n        return elm.color;\r\n      }\r\n    }\r\n    return mapColor;\r\n  }\r\n  return mapColor;\r\n};\r\n\r\nconst getRegionHoverColor = (name, data) => {\r\n  if (data.length > 0 || name) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      const elm = data[i];\r\n      if (name === elm.name) {\r\n        return utils.shadeColor(elm.color, hoverPercentage);\r\n      }\r\n    }\r\n    return utils.shadeColor(mapColor, hoverPercentage);\r\n  }\r\n  return utils.shadeColor(mapColor, hoverPercentage);\r\n};\r\n\r\nconst getRegionValue = (name, data) => {\r\n  if (data.length > 0 || name) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      const elm = data[i];\r\n      if (name === elm.name) {\r\n        return `${elm.name} — ${elm.value}`;\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst MapChart = ({ setTooltipContent, data, mapSource, mapType, handleOnChangeRegion }) => {\r\n  const handleChange = geoName => {\r\n    let selectedCountries = data.map(e => (e.title === \"United States\" ? \"United States of America\" : e.title));\r\n    if (selectedCountries.includes(geoName)) {\r\n      let param = {\r\n        location: geoName,\r\n        account: \"All\",\r\n      };\r\n      if (geoName === \"United States of America\") {\r\n        param.location = \"United States\";\r\n        handleOnChangeRegion(param);\r\n        return;\r\n      }\r\n      handleOnChangeRegion(param);\r\n    }\r\n  };\r\n  return (\r\n    <ComposableMap\r\n      style={{ transform: `${mapType === \"world\" ? \"translateY(20px)\" : \"none\"}` }}\r\n      data-tip=\"\"\r\n      height={380}\r\n      projectionConfig={{ scale: 145 }}\r\n    >\r\n      <Geographies geography={mapSource}>\r\n        {({ geographies }) =>\r\n          geographies.map(geo => {\r\n            const geoName = mapType === \"world\" ? geo.properties.name : geo.properties.NAME_1;\r\n            return (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                onClick={() => handleChange(geoName)}\r\n                onMouseEnter={() => {\r\n                  setTooltipContent(getRegionValue(geoName, data));\r\n                }}\r\n                onMouseLeave={() => {\r\n                  setTooltipContent(\"\");\r\n                }}\r\n                fill={getHighlightedRegion(geoName, data)}\r\n                stroke=\"#D6D6DA\"\r\n                style={{\r\n                  hover: {\r\n                    fill: getRegionHoverColor(geoName, data),\r\n                    outline: \"none\",\r\n                  },\r\n                }}\r\n              />\r\n            );\r\n          })\r\n        }\r\n      </Geographies>\r\n    </ComposableMap>\r\n  );\r\n};\r\n\r\nconst Map = props => {\r\n  const { data, mapSource, mapType, onChange } = props;\r\n  const [content, setContent] = useState(\"\");\r\n  return (\r\n    <>\r\n      <MapChart\r\n        data={data}\r\n        mapSource={mapSource}\r\n        mapType={mapType}\r\n        setTooltipContent={setContent}\r\n        handleOnChangeRegion={onChange}\r\n      />\r\n      <ReactTooltip>{content}</ReactTooltip>\r\n    </>\r\n  );\r\n};\r\n\r\nconst renderDataList = (data, loader) => {\r\n  const list =\r\n    !!data.length && !loader ? (\r\n      data.map(elm => (\r\n        <div className=\"d-flex align-items-center justify-content-between mb-3\" key={elm.name}>\r\n          <div>\r\n            <Badge color={elm.color} />\r\n            <span className=\"text-gray-light\">{elm.title}</span>\r\n          </div>\r\n          <span className=\"font-weight-bold text-dark\">{elm.value}</span>\r\n        </div>\r\n      ))\r\n    ) : (\r\n      <Skeleton active />\r\n    );\r\n  return list;\r\n};\r\n\r\nexport const RegiondataWidget = props => {\r\n  const { mapSource, mapType, list, onChange, flag, loader } = props;\r\n  const [allocationData, setAllocationData] = useState([]);\r\n  const [allocationLabel, setAllocationLabel] = useState([]);\r\n\r\n  const regionsDesc = useSelector(state => state.myTeams.regionDesc);\r\n  const regions = useSelector(state => state.myTeams.regionData);\r\n  const allocations = useSelector(state => state.myTeams.allocationData);\r\n  const globalMap = useSelector(state => state.myTeams.globalMapData);\r\n  const [mapRegions, setMapRegions] = useState([]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!!regions.length) {\r\n      let newRegions = prepareRegionsColors(regions);\r\n      setMapRegions(newRegions);\r\n      if (globalMap.length === 0) {\r\n        dispatch(setGlobalMapData(newRegions));\r\n      }\r\n    }\r\n    if (allocations) {\r\n      setAllocationData(allocations?.allocationData?.map(Number));\r\n      setAllocationLabel(allocations?.allocationLabels);\r\n    }\r\n  }, [allocations, regions, globalMap]);\r\n\r\n  const prepareRegionsColors = regions => {\r\n    const newRegions = regions.map((i, index) => {\r\n      return {\r\n        ...i,\r\n        name: i.title === \"United States\" ? \"United States of America\" : i.title,\r\n        color: COLORS[index],\r\n      };\r\n    });\r\n    return newRegions;\r\n  };\r\n\r\n  const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\r\n  const dataForChart = () => {\r\n    let arr = [];\r\n    for (let i = 0; i < allocationData?.length; i++) {\r\n      const data = allocationData[i];\r\n      const label = allocationLabel[i];\r\n      const color = COLORS[i];\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          data: data,\r\n          label: label,\r\n          color: color,\r\n        },\r\n      ];\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  const newData = dataForChart();\r\n\r\n  const refreshData = () => {\r\n    onChange({\r\n      location: \"All\",\r\n      account: \"All\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card bodyStyle={{ padding: 0 }} className=\"mb-0\">\r\n      <Row>\r\n        <Col xs={24} sm={24} md={24} lg={6} className=\"border-right\">\r\n          <div className=\"d-flex flex-column p-3 h-100\" style={{ justifyContent: \"space-evenly\" }}>\r\n            {loader ? (\r\n              <Skeleton />\r\n            ) : (\r\n              <div>{regionsDesc && <h4 className=\"font-weight-bold\">{regionsDesc?.title}</h4>}</div>\r\n            )}\r\n\r\n            <div>\r\n              <div className=\"mb-4\">\r\n                <div className=\"d-flex align-items-center justify-content-between\">\r\n                  {regionsDesc && !loader ? (\r\n                    <>\r\n                      <div className=\"d-flex\">\r\n                        {flag}\r\n                        <h2 className=\"mb-0 ml-2 font-weight-bold\">{regionsDesc && regionsDesc?.count}</h2>\r\n                      </div>\r\n                      <div>\r\n                        <Button onClick={refreshData}>\r\n                          <SyncOutlined shape=\"circle\" />\r\n                        </Button>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <Skeleton.Button active={true} />\r\n                  )}\r\n                </div>\r\n                {loader ? <Skeleton /> : <span className=\"text-muted\">{regionsDesc && regionsDesc?.description}</span>}\r\n              </div>\r\n            </div>\r\n            <div>{list ? list : renderDataList(mapRegions, loader)}</div>\r\n          </div>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={12}>\r\n          <div className=\"d-flex flex-column justify-content-center\" style={{ minHeight: isMobile ? 200 : 435 }}>\r\n            <div className=\"p-3 w-100\">\r\n              {loader ? (\r\n                <Skeleton />\r\n              ) : (\r\n                <Map data={globalMap} mapSource={mapSource} mapType={mapType} onChange={onChange} />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={6} className=\"border-left\">\r\n          <DonutChartWidget\r\n            series={allocationData}\r\n            labels={allocationLabel}\r\n            title=\"Allocation Status\"\r\n            bodyClass=\"my-3\"\r\n            customOptions={{ colors: COLORS }}\r\n            loader={loader}\r\n            extra={\r\n              <Row justify=\"center\">\r\n                <Col xs={20} sm={20} md={20} lg={24}>\r\n                  <div className=\"mt-4 mx-auto\" style={{ maxWidth: 200 }}>\r\n                    {!!newData.length && !loader ? (\r\n                      newData?.map(elm => (\r\n                        <Flex alignItems=\"center\" justifyContent=\"between\" className=\"mb-3\" key={elm.label}>\r\n                          <div>\r\n                            <Badge color={elm.color} />\r\n                            <span className=\"text-gray-light\">{elm.label}</span>\r\n                          </div>\r\n                          <span className=\"font-weight-bold text-dark\">{elm.data}</span>\r\n                        </Flex>\r\n                      ))\r\n                    ) : (\r\n                      <Skeleton />\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nRegiondataWidget.propTypes = {\r\n  title: PropTypes.string,\r\n  data: PropTypes.array,\r\n  mapSource: PropTypes.object,\r\n  mapType: PropTypes.string,\r\n  content: PropTypes.element,\r\n  list: PropTypes.element,\r\n};\r\n\r\nRegiondataWidget.defaultProps = {\r\n  data: [],\r\n  mapSource: geoUrl,\r\n  mapType: \"world\",\r\n};\r\n\r\nexport default RegiondataWidget;\r\n","import React from \"react\";\r\nimport { Card, Typography } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\r\n\r\nconst StatisticWidget = ({ title, value, status, subtitle, prefix }) => {\r\n  return (\r\n    <Card>\r\n      {title && (\r\n        <Typography.Title level={4} className=\"mb-0 pr-2\" ellipsis={{ tooltip: title }}>\r\n          {title}\r\n        </Typography.Title>\r\n      )}\r\n      <div className={`${prefix ? \"d-flex\" : \"\"} ${title ? \"mt-3\" : \"\"}`}>\r\n        {prefix ? <div className=\"mr-2\">{prefix}</div> : null}\r\n\r\n        <div className=\"d-flex align-items-baseline\">\r\n          <h1 className=\"mb-0 font-weight-bold\">{value}</h1>\r\n          {status ? (\r\n            <span\r\n              className={`font-size-md font-weight-bold ml-3 ${\r\n                status !== 0 && status > 0 ? \"text-success\" : \"text-danger\"\r\n              }`}\r\n            >\r\n              {status}\r\n              {status !== 0 && status > 0 ? <ArrowUpOutlined /> : <ArrowDownOutlined />}\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n        {subtitle && <div className=\"text-gray-light mt-1\">{subtitle}</div>}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nStatisticWidget.propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n  value: PropTypes.string,\r\n  subtitle: PropTypes.string,\r\n  status: PropTypes.number,\r\n  prefix: PropTypes.element,\r\n};\r\n\r\nexport default StatisticWidget;\r\n","import { Avatar, Card, Col, Row, Skeleton } from \"antd\";\nimport RegiondataWidget from \"components/shared-components/RegiondataWidget\";\nimport StatisticWidget from \"components/shared-components/StatisticWidget\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { getRegionalData, setAllocationData, setGlobalTrend, setRegionData, setRegionDescData } from \"redux/actions\";\nimport dashboardServices from \"services/DashboardServices\";\n\nfunction RegionalWidgetComp() {\n  const dispatch = useDispatch();\n  const [loader, setLoader] = useState(false);\n  const globalTrends = useSelector(state => state.myTeams.globalTrends);\n  const [flag, setFlag] = useState(\"global\");\n  const globalFlag = useSelector(state => state.myTeams?.regionDesc?.flag);\n\n  const getData = async params => {\n    setFlag(params.location);\n    if (flag !== params.location) {\n      try {\n        setLoader(true);\n        const response = await dashboardServices.getRegionalData(params);\n        const { headCountTrends, allocations, regions, count, description, title } = response;\n        let regionDesc = { count, description, title, flag: params.location };\n        dispatch(setGlobalTrend(headCountTrends));\n        dispatch(setRegionData(regions));\n        dispatch(setAllocationData(allocations));\n        dispatch(setRegionDescData(regionDesc));\n      } catch (e) {\n        console.error(\"Unable to populate Allocation list\", e);\n      } finally {\n        setLoader(false);\n      }\n    }\n  };\n\n  const getFlag = key => {\n    switch (key) {\n      case \"United States\":\n        return <Avatar size={30} src=\"/img/flags/america.gif\" />;\n      case \"Canada\":\n        return <Avatar size={30} src=\"/img/flags/canada.gif\" />;\n      case \"Chile\":\n        return <Avatar size={30} src=\"/img/flags/chile.gif\" />;\n      case \"Pakistan\":\n        return <Avatar size={30} src=\"/img/flags/pakistan.gif\" />;\n      case \"India\":\n        return <Avatar size={30} src=\"/img/flags/india.gif\" />;\n      case \"Colombia\":\n        return <Avatar size={30} src=\"/img/flags/columbia.gif\" />;\n      default:\n        return <Avatar size={30} src=\"/img/flags/global.png\" />;\n    }\n  };\n  return (\n    <React.Fragment>\n      <Card>\n        <Row gutter={16}>\n          {!!globalTrends.length && !loader\n            ? globalTrends.map((elm, i) => (\n                <Col xs={24} sm={24} md={8} lg={6} xl={6} key={i} className=\"gutter-row\">\n                  <StatisticWidget title={elm.title} value={elm.value} status={elm.status} subtitle={elm.subTitle} />\n                </Col>\n              ))\n            : [...Array(5).keys()].map(e => {\n                return (\n                  <Col xs={24} sm={24} md={12} lg={4} xl={4} key={e}>\n                    <Skeleton id={e} active />\n                  </Col>\n                );\n              })}\n        </Row>\n        <RegiondataWidget onChange={getData} flag={getFlag(globalFlag)} loader={loader} />\n      </Card>\n    </React.Fragment>\n  );\n}\n\nexport default RegionalWidgetComp;\n","export const COLOR_1 = \"#3e82f7\"; // blue\r\nexport const COLOR_2 = \"#04d182\"; // cyan\r\nexport const COLOR_3 = \"#ff6b72\"; // volcano\r\nexport const COLOR_4 = \"#ffc107\"; // gold\r\nexport const COLOR_5 = \"#a461d8\"; // purple\r\nexport const COLOR_6 = \"#fa8c16\"; // orange\r\nexport const COLOR_7 = \"#17bcff\"; // geekblue\r\nexport const COLOR_8 = \"#027148\";\r\nexport const COLOR_1_LIGHT = \"rgba(62, 130, 247, 0.15)\";\r\nexport const COLOR_2_LIGHT = \"rgba(4, 209, 130, 0.1)\";\r\nexport const COLOR_3_LIGHT = \"rgba(222, 68, 54, 0.1)\";\r\nexport const COLOR_4_LIGHT = \"rgba(255, 193, 7, 0.1)\";\r\nexport const COLOR_5_LIGHT = \"rgba(139, 75, 157, 0.1)\";\r\nexport const COLOR_6_LIGHT = \"rgba(250, 140, 22, .1)\";\r\nexport const COLOR_7_LIGHT = \"rgba(23, 188, 255, 0.15)\";\r\n\r\nexport const COLORS = [COLOR_8, COLOR_1, COLOR_2, COLOR_4, COLOR_5, COLOR_6, COLOR_7, COLOR_8];\r\nexport const COLORS_LIGHT = [\r\n  COLOR_1_LIGHT,\r\n  COLOR_2_LIGHT,\r\n  COLOR_3_LIGHT,\r\n  COLOR_4_LIGHT,\r\n  COLOR_5_LIGHT,\r\n  COLOR_6_LIGHT,\r\n  COLOR_7_LIGHT,\r\n];\r\n\r\nexport const COLOR_AXES = \"#edf2f9\";\r\nexport const COLOR_TEXT = \"#455560\";\r\n\r\nexport const apexLineChartDefaultOption = {\r\n  chart: {\r\n    zoom: {\r\n      enabled: false,\r\n    },\r\n    toolbar: {\r\n      show: false,\r\n    },\r\n  },\r\n  colors: [...COLORS],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  stroke: {\r\n    width: 3,\r\n    curve: \"smooth\",\r\n    lineCap: \"round\",\r\n  },\r\n  legend: {\r\n    position: \"top\",\r\n    horizontalAlign: \"right\",\r\n    offsetY: -15,\r\n    itemMargin: {\r\n      vertical: 20,\r\n    },\r\n    tooltipHoverFormatter: function (val, opts) {\r\n      return val + \" - \" + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + \"\";\r\n    },\r\n  },\r\n  xaxis: {\r\n    categories: [],\r\n  },\r\n  grid: {\r\n    xaxis: {\r\n      lines: {\r\n        show: true,\r\n      },\r\n    },\r\n    yaxis: {\r\n      lines: {\r\n        show: false,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const apexAreaChartDefaultOption = { ...apexLineChartDefaultOption };\r\n\r\nexport const apexBarChartDefaultOption = {\r\n  chart: {\r\n    zoom: {\r\n      enabled: false,\r\n    },\r\n    toolbar: {\r\n      show: false,\r\n    },\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      horizontal: false,\r\n      columnWidth: \"25px\",\r\n      startingShapre: \"rounded\",\r\n      endingShape: \"rounded\",\r\n    },\r\n  },\r\n  colors: [...COLORS],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  stroke: {\r\n    show: true,\r\n    width: 6,\r\n    curve: \"smooth\",\r\n    colors: [\"transparent\"],\r\n  },\r\n  legend: {\r\n    position: \"top\",\r\n    horizontalAlign: \"right\",\r\n    offsetY: -15,\r\n    inverseOrder: true,\r\n    itemMargin: {\r\n      vertical: 20,\r\n    },\r\n    tooltipHoverFormatter: function (val, opts) {\r\n      return val + \" - \" + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + \"\";\r\n    },\r\n  },\r\n  xaxis: {\r\n    categories: [],\r\n  },\r\n  fill: {\r\n    opacity: 1,\r\n  },\r\n  tooltip: {\r\n    y: {\r\n      formatter: val => `${val}`,\r\n    },\r\n  },\r\n};\r\n\r\nexport const apexPieChartDefaultOption = {\r\n  colors: [...COLORS],\r\n  plotOptions: {\r\n    pie: {\r\n      size: 50,\r\n      donut: {\r\n        labels: {\r\n          show: true,\r\n          total: {\r\n            show: true,\r\n            showAlways: true,\r\n            label: \"\",\r\n            fontSize: \"18px\",\r\n            fontFamily: \"Roboto\",\r\n            fontWeight: \"bold\",\r\n            color: \"#1a3353\",\r\n            formatter: function (w) {\r\n              return w.globals.seriesTotals.reduce((a, b) => {\r\n                return a + b;\r\n              }, 0);\r\n            },\r\n          },\r\n        },\r\n        size: \"87%\",\r\n      },\r\n    },\r\n  },\r\n  labels: [],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  legend: {\r\n    show: false,\r\n  },\r\n};\r\n\r\nexport const apexSparklineChartDefultOption = {\r\n  chart: {\r\n    type: \"line\",\r\n    sparkline: {\r\n      enabled: true,\r\n    },\r\n  },\r\n  stroke: {\r\n    width: 2,\r\n    curve: \"smooth\",\r\n  },\r\n  tooltip: {\r\n    fixed: {\r\n      enabled: false,\r\n    },\r\n    x: {\r\n      show: false,\r\n    },\r\n    y: {\r\n      title: {\r\n        formatter: function (seriesName) {\r\n          return \"\";\r\n        },\r\n      },\r\n    },\r\n    marker: {\r\n      show: false,\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}