{"version":3,"sources":["views/app-views/manage-group/openpool/editManageOpenPoolForm.jsx","constants/ManageProjectsConstant.js","constants/ManageOpenPoolContansts.js","services/manageOpenPoolService.js"],"names":["EditManageOpenPoolForm","_ref","show","isEdit","onCancel","editAccounts","confirm","Modal","Option","Select","OptGroup","_Form$useForm","Form","useForm","form","_slicedToArray","_useState","useState","_useState2","probableBillingDate","setprobableBillingDate","_useState3","_useState4","setBilableStatus","_useState5","moment","probableBillingDetails","_useState6","handleConfirm","isFieldsTouched","title","CONFIRM_MESSAGE","value","centered","onOk","success","message","UPDATE_SUCCESS","ADD_SUCCESS","handleOk","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","formValues","probablebillingdetails","data","datatoupdate","wrap","_context","prev","next","validateFields","sent","Date","unix","comment","_d","manageOpenPoolService","prepareData","prepareRequestData","billableStatus","UpdateResource","loginEmpId","employeIdrecord","resetFields","t0","console","log","VALIDATION_FAILED","stop","_x","apply","arguments","initials","_jsx","visible","EDIT_MANAGE_FORM_TITLE","bodyStyle","overflowY","SELECT_HIGHT","text","maxHeight","footer","Button","onClick","children","CANCEL_TEXT","MODAL_BACK_BUTTON","type","MODAL_ADD_BUTTON_TYPE","UPDATE_TEXT","_jsxs","_objectSpread","name","FORM_NAME","layout","SELECT_LAYOUT","labelCol","span","wrapperCol","initialValues","Item","BILLABLE_STATUS","label","rules","required","PROJECT_STATUS_REQ","placeholder","onChange","map","charAt","toUpperCase","slice","PROBABLE_BILLING_DATE","PROJECT_DATE_REQ","DatePicker","format","DATE_FORMAT_YYYY_MM_dd","COMMENT","Input","IntlMessage","id","EDIT_PROJECT_CHECKBOX_DATE","EDIT_PROJECT_TITLE","PROJECT_NAME","DOMAIN_NAME","ACCOUNT_REQ","ADD_PROJECT_MESSAGE","UPDATE_PROJECT_MESSAGE","START_DATE","DATE","FORM_FIELDS","EXTEND_LABEL","PARENT_ACCOUNT_LABEL","RESERVED_FOR_LABEL","RELEASE_LABEL","EMPLOYEE_ID","ACCOUNT_NAME","DELIVERY_LEAD","PROJECT_STATUS","PROJECT_DATE","errorMessage","EMPLOYEE","SUB_DOMAIN","ASSIGNED_ROLE","ASSIGNED_LEVEL","ALLOCATION_STATUS","ALLOCATION_SUB_STATUS","ALLOWED_ALLOCATION_STATUS","ADD_RESOURCE_ON_BEHALF","RESERVED_FOR","DESIGNATION","PROJECT_START_DATE","PROJECT_END_DATE","NOTES","RESERVATION_FORM_FIELDS","RESERVATION","extendText","UPDATE_STATUS","RELEASE","PAGE_HEADING","MODAL_TITLE","MENU_ITEMS_TYPES","exportVisibleExcel","exportAllExcel","exportVisiblePDF","exportAllPDF","MENU_ITEMS","PROBABLE_BILLING_DETAILS","BILLING_START_DATE","MANAGE_POOL_TITLE","ACTION","ACTION_ACTIVE","length","undefined","item","employeeId","employeeName","functionalGroup","previousExperience","accountName","billingStartDate","DATE_FORMAT_DD_MM_YYYY","ProjectName","subDomain","x","dataIndex","filter","getList","params","_API_CONSTANTS$MANAGE","path","method","response","API_CONSTANTS","MANAGE_OPEN_POOL_RESOURCE_LIST","service","url","Utils","isEmpty","abrupt","error","_callee2","_API_CONSTANTS$MANAGE2","_context2","MANAGE_OPEN_POOL_RESOURCE_UPDATE_LIST","_x2","_x3","obj","el","projectId","billingEndDate","Status","resourceStatus","accountId"],"mappings":"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","file":"static/js/112.7c295abb.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Modal, Button, message, Form, Input, Select, DatePicker } from \"antd\";\nimport moment from \"moment\";\nimport { FORM_NAME, MODAL_ADD_BUTTON_TYPE, MODAL_BACK_BUTTON, VALIDATION_FAILED } from \"constants/CommonConstants\";\nimport { DATE_FORMAT_YYYY_MM_dd } from \"constants/DateConstant\";\nimport manageOpenPoolService from \"services/manageOpenPoolService\";\nimport { CANCEL_TEXT, UPDATE_TEXT } from \"../../../../constants/ManageAccounts\";\nimport {\n  PROJECT_DATE_REQ,\n  PROJECT_STATUS_REQ,\n  UPDATE_SUCCESS,\n  ADD_SUCCESS,\n  SELECT_HIGHT,\n  SELECT_LAYOUT,\n  CONFIRM_MESSAGE,\n} from \"../../../../constants/ManageProjectsConstant\";\nimport { COMMENT, EDIT_MANAGE_FORM_TITLE } from \"constants/ManageOpenPoolContansts\";\nimport { BILLABLE_STATUS, PROBABLE_BILLING_DATE } from \"../../../../constants/ManageOpenPoolContansts\";\n\nconst EditManageOpenPoolForm = ({ show, isEdit, onCancel, editAccounts }) => {\n  const { confirm } = Modal;\n  const { Option, OptGroup } = Select;\n  const [form] = Form.useForm();\n  const [probableBillingDate, setprobableBillingDate] = useState(null);\n  const [bilableStatus, setBilableStatus] = useState(null);\n  const [date, setdate] = useState(isEdit ? moment(editAccounts?.probableBillingDetails) : []);\n\n  const billing_Status = [\"Shadow\", \"Confirmed\", \"Billable\", \"Trainee\", \"Non-Billable\", \"Reserved\"];\n  const formItemLayout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 14 },\n  };\n  const handleConfirm = () => {\n    if (form.isFieldsTouched()) {\n      confirm({\n        title: CONFIRM_MESSAGE.value,\n        centered: true,\n        onOk() {\n          onCancel();\n        },\n      });\n    } else onCancel();\n  };\n  const success = () => {\n    isEdit ? message.success(UPDATE_SUCCESS.value) : message.success(ADD_SUCCESS.value);\n  };\n\n  const handleOk = async e => {\n    try {\n      let formValues = await form.validateFields();\n      setprobableBillingDate(moment(new Date(probableBillingDate)).unix());\n      const probablebillingdetails = [\n        { comment: formValues.comment, probableBillingDate: new Date(formValues.probableBillingDate._d) },\n      ];\n      const data = manageOpenPoolService.prepareData([editAccounts]);\n      const datatoupdate = manageOpenPoolService.prepareRequestData(\n        formValues.billableStatus,\n        probablebillingdetails,\n        data,\n      );\n      if (editAccounts && form.isFieldsTouched()) {\n        const res = await manageOpenPoolService.UpdateResource(\n          {\n            loginEmpId: editAccounts?.employeIdrecord,\n          },\n          datatoupdate,\n        );\n        success();\n      } else {\n        success();\n      }\n      form.resetFields();\n      onCancel();\n    } catch (info) {\n      console.log(VALIDATION_FAILED.value, info);\n    }\n  };\n  let initials = {\n    billableStatus: editAccounts?.billableStatus,\n    probableBillingDate: editAccounts?.probableBillingDetails ? moment(editAccounts?.probableBillingDetails) : \"\",\n  };\n  const handleComment = value => {\n    setBilableStatus(value);\n  };\n  return (\n    <Modal\n      visible={show}\n      title={EDIT_MANAGE_FORM_TITLE.value}\n      onCancel={handleConfirm}\n      onOk={handleOk}\n      bodyStyle={{ overflowY: SELECT_HIGHT.text, maxHeight: SELECT_HIGHT.value }}\n      footer={[\n        <Button key={MODAL_BACK_BUTTON.value} onClick={handleConfirm}>\n          {CANCEL_TEXT.text}\n        </Button>,\n\n        <Button key={MODAL_ADD_BUTTON_TYPE.value} onClick={handleOk} type={MODAL_ADD_BUTTON_TYPE.value}>\n          {UPDATE_TEXT.text}\n        </Button>,\n      ]}\n    >\n      <Form form={form} name={FORM_NAME.text} layout={SELECT_LAYOUT.text} {...formItemLayout} initialValues={initials}>\n        <Form.Item\n          name={BILLABLE_STATUS}\n          label={BILLABLE_STATUS}\n          rules={[\n            {\n              required: true,\n              message: PROJECT_STATUS_REQ.text,\n            },\n          ]}\n        >\n          <Select placeholder={BILLABLE_STATUS} onChange={handleComment}>\n            <OptGroup label={BILLABLE_STATUS}>\n              {billing_Status.map(e => {\n                return (\n                  <Option key={e} value={e}>\n                    {e.charAt(0).toUpperCase() + e.slice(1)}\n                  </Option>\n                );\n              })}\n            </OptGroup>\n          </Select>\n        </Form.Item>\n\n        <Form.Item\n          label={PROBABLE_BILLING_DATE}\n          name={PROBABLE_BILLING_DATE}\n          rules={[\n            {\n              required: true,\n              message: PROJECT_DATE_REQ.text,\n            },\n          ]}\n        >\n          <DatePicker format={DATE_FORMAT_YYYY_MM_dd} />\n        </Form.Item>\n        <Form.Item\n          name={COMMENT}\n          label={COMMENT}\n          rules={[\n            {\n              message: CONFIRM_MESSAGE.value,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default EditManageOpenPoolForm;\n","import IntlMessage from \"components/util-components/IntlMessage\";\nimport commonService from \"services/CommonService\";\nexport const UPDATE_SUCCESS = {\n  text: \"component.manageproject.updatesuccess.msg\",\n  value: \"project updated successfuly\",\n};\nexport const ADD_SUCCESS = {\n  text: \"component.manageproject.projectsuccess.msg\",\n  value: \"project created successfuly\",\n};\nexport const PROJECTNAME_REQ = {\n  text: <IntlMessage id=\"component.manageproject.projectname.msg\" />,\n  value: \"project name is required\",\n  placeholder: \"component.manageproject.projectname.msg\",\n};\nexport const DOMAIN_REQ = {\n  text: <IntlMessage id=\"component.manageproject.domainname.msg\" />,\n  value: \"domain name is required\",\n};\nexport const LEAD_REQ = {\n  text: <IntlMessage id=\"component.manageproject.deliveryLeadname.msg\" />,\n  value: \"delivery lead  is required \",\n};\nexport const PROJECT_STATUS_REQ = {\n  text: <IntlMessage id=\"component.manageproject.projectstatus.msg\" />,\n  value: \"project status is required\",\n};\nexport const PROJECT_DATE_REQ = {\n  text: <IntlMessage id=\"component.manageproject.projectdate.msg\" />,\n  value: \"project start and end date is required\",\n};\nexport const EDIT_PROJECT_CHECKBOX_DATE = {\n  text: <IntlMessage id=\"component.manageprojects.editproject.datecheckbox\" />,\n  value:\n    \"Select this option if the updated project end date has to be updated with the billing end date for all the team members.\",\n};\nexport const ADD_PROJECT_TITLE = {\n  text: <IntlMessage id=\"component.manageproject.addproject.title\" />,\n  value: \"Add Project\",\n};\nexport const EDIT_PROJECT_TITLE = {\n  text: <IntlMessage id=\"component.manageproject.editproject.title\" />,\n  value: \"Update Project\",\n};\nexport const SELECT_HIGHT = {\n  text: \"calc(100vh - 200px)\",\n  value: \"auto\",\n};\nexport const SELECT_LAYOUT = {\n  text: \"horizontal\",\n  value: \"horizontal\",\n};\nexport const PROJECT_NAME = {\n  text: \"projectName\",\n  value: \"Project Name\",\n};\nexport const DOMAIN_NAME = {\n  text: \"domainName\",\n  value: \"Domain Name\",\n};\nexport const SUBDOMAIN_NAME = {\n  text: \"subdomain\",\n  value: \"Sub Domain\",\n};\nexport const LEAD_NAME = {\n  text: \"deliveryLead\",\n  value: \"Delivery Lead\",\n};\nexport const ACCOUNT_REQ = {\n  text: \"accountName\",\n  value: \"Account Name\",\n};\nexport const PROJECT_DATE = {\n  text: \"projectDate\",\n  value: \"Project Date\",\n};\nexport const PROJECT_STATUS = {\n  text: \"projectStatus\",\n  value: \"Project Status\",\n};\n\nexport const DATE_FORMAT = {\n  text: \"YYYY-MM-DD\",\n  value: \"YYYY-MM-DD\",\n};\nexport const LEAD_ERROR_MESSAGE = {\n  text: <IntlMessage id=\"component.manageproject.inactive.lead.error.msg\" />,\n  value: \"Select active delivery lead\",\n};\nexport const CONFIRM_MESSAGE = {\n  text: <IntlMessage id=\"component.common.confirm.message\" />,\n  value: \"Are you sure you want to cancel this?\",\n};\nexport const ADD_PROJECT_MESSAGE = {\n  text: \"component.common.confirm.addproject.message\",\n  value: \"Are you sure you want to add this project?\",\n};\nexport const UPDATE_PROJECT_MESSAGE = {\n  text: \"component.common.confirm.updateproject.message\",\n  value: \"Are you sure you want to update this project?\",\n};\n\nexport const UPDATE_PROJECT_TITLE = <IntlMessage id=\"component.manageProject.updateprojectTitle\" />;\n// export const ADD_PROJECT_TITLE = <IntlMessage id=\"component.manageProject.addprojectTitle\" />;\nexport const START_DATE = {\n  DATE: {\n    label: \"component.manageprojects.manageteams.date.heading\",\n    text: \"component.manageprojects.manageteams.startdate\",\n    value: \"startDate\",\n  },\n};\nexport const RELEASE_STATUS = {};\nexport const FORM_FIELDS = {\n  EXTEND_LABEL: {\n    label: \"common.label.extend\",\n    value: \"extend\",\n  },\n  PARENT_ACCOUNT_LABEL: {\n    label: \"common.label.parent.account\",\n    value: \"accountName\",\n  },\n  RESERVED_FOR_LABEL: {\n    label: \"component.manage.projects.reservedFor.placeholder\",\n    value: \"accountName\",\n  },\n  RELEASE_LABEL: {\n    label: \"common.label.release.text\",\n    value: \"release\",\n  },\n  PROJECT_NAME: {\n    label: \"common.label.projectname\",\n    name: \"projectName\",\n    value: \"projectId\",\n  },\n  EMPLOYEE_ID: {\n    label: \"common.label.employeeId\",\n    name: \"employeeId\",\n  },\n  ACCOUNT_NAME: {\n    label: \"common.label.accountname\",\n    name: \"accountName\",\n  },\n  DOMAIN_NAME: {\n    name: \"domainName\",\n    value: \"domainId\",\n    label: \"common.label.domainname\",\n  },\n  DELIVERY_LEAD: {\n    name: \"deliveryLead\",\n    label: \"common.label.deliverylead\",\n  },\n  PROJECT_STATUS: {\n    name: \"projectStatus\",\n    label: \"component.manageprojects.project.status.label\",\n  },\n  PROJECT_DATE: {\n    name: \"projectDate\",\n    label: \"component.manageprojects.project.date.label\",\n    errorMessage: \"component.manageproject.projectdate.msg\",\n  },\n  EMPLOYEE: {\n    name: \"employeeName\",\n    label: \"common.label.employeeName\",\n  },\n  SUB_DOMAIN: {\n    value: \"subDomainId\",\n    name: \"subdomain\",\n    label: \"common.label.subdomain.name.label\",\n  },\n  ASSIGNED_ROLE: {\n    name: \"assignedRole\",\n    label: \"component.manage.projects.assignedlevel.label\",\n  },\n  ASSIGNED_LEVEL: {\n    name: \"assignedLevel\",\n    label: \"component.manage.projects.assignedlevel.label\",\n  },\n  ALLOCATION_STATUS: {\n    name: \"allocationStatus\",\n    label: \"component.manage.projects.allocationstatus.lablel\",\n  },\n  ALLOCATION_SUB_STATUS: {\n    name: \"allocationSubStatus\",\n    label: \"component.manage.projects.allowed.allocation.substatus.lablel\",\n  },\n  ALLOWED_ALLOCATION_STATUS: {\n    name: \"allowedAllocationSubStatues\",\n    label: \"component.manage.projects.allowed.allocationstatus.lablel\",\n  },\n  BILLABLE_STATUS: {\n    name: \"billableStatus\",\n    label: \"common.label.billablestatus\",\n  },\n  ADD_RESOURCE_ON_BEHALF: {\n    name: \"addResourceOnBehalf\",\n    label: \"component.manage.projects.behalfof.placeholder\",\n  },\n  RESERVED_FOR: {\n    name: \"reservedFor\",\n    label: \"component.manage.projects.reservedFor.placeholder\",\n  },\n  DESIGNATION: {\n    name: \"designation\",\n    label: \"common.label.designation\",\n  },\n  PROJECT_START_DATE: {\n    name: \"projectStartDate\",\n    label: \"component.myprojectallocations.project_start_date.heading\",\n    errorMessage: \"component.manageproject.projectstartdate.msg\",\n  },\n  PROJECT_END_DATE: {\n    name: \"projectEndDate\",\n    label: \"component.myprojectallocations.project_end_date.heading\",\n    errorMessage: \"component.manageproject.projectenddate.msg\",\n  },\n  NOTES: {\n    value: \"notes\",\n    name: \"notes\",\n    label: \"common.label.notes\",\n  },\n};\n\nexport const RESERVATION_FORM_FIELDS = {\n  RESERVATION: {\n    label: \"common.label.reservation\",\n    message: \"common.label.reservation.message\",\n    name: \"comments\",\n    text: \"component.common.update.text\",\n    extendText: \"component.manageprojects.action.text.extend\",\n  },\n  UPDATE_STATUS: {\n    label: \"common.label.update.status\",\n    value: \"updateStatus\",\n  },\n  RELEASE: {\n    label: \"common.label.release\",\n    message: \"common.label.release.date.message\",\n    name: \"releaseDate\",\n    text: \"component.manageprojects.action.label.release\",\n  },\n};\nexport const PAGE_HEADING = {\n  MODAL_TITLE: {\n    title: \"component.manageprojects.action.label.extend.reservation\",\n    text: \"component.manageprojects.action.label.release.employee\",\n  },\n};\n","import IntlMessage from \"components/util-components/IntlMessage\";\nexport const MENU_ITEMS_TYPES = {\n  exportVisibleExcel: \"EXPORT_VISIBLE_EXCEL\",\n  exportAllExcel: \"EXPORT_ALL_EXCEL\",\n  exportVisiblePDF: \"EXPORT_VISIBLE_PDF\",\n  exportAllPDF: \"EXPORT_ALL_PDF\",\n};\n\nexport const MENU_ITEMS = [\n  { title: <IntlMessage id=\"component.manageopenpool.alldataexcel.heading\" />, type: MENU_ITEMS_TYPES.exportAllExcel },\n  {\n    title: <IntlMessage id=\"component.manageopenpool.visibledataexcel.heading\" />,\n    type: MENU_ITEMS_TYPES.exportVisibleExcel,\n  },\n  { title: <IntlMessage id=\"component.manageopenpool.alldatapdf.heading\" />, type: MENU_ITEMS_TYPES.exportAllPDF },\n  {\n    title: <IntlMessage id=\"component.manageopenpool.visibledatapdf.heading\" />,\n    type: MENU_ITEMS_TYPES.exportVisiblePDF,\n  },\n];\n\nexport const PROBABLE_BILLING_DETAILS = {\n  text: <IntlMessage id=\"component.manageopenpool.porbablebillingdata.heading\" />,\n  value: \"probableBillingDetails\",\n};\n\nexport const BILLING_START_DATE = {\n  text: <IntlMessage id=\"component.manageopenpool.billingstartdate.heading\" />,\n  value: \"billingStartDate\",\n};\nexport const MANAGE_POOL_TITLE = \"Manage Open Pool\";\nexport const ACTION = \"actions\";\nexport const ACTION_ACTIVE = \"Y\";\n\nexport const EDIT_MANAGE_FORM_TITLE = {\n  text: <IntlMessage id=\"component.manageopenpool.editmanagepoolform.title\" />,\n  value: \"Edit Manage Pool Resource\",\n};\nexport const BILLABLE_STATUS = \"billableStatus\";\nexport const COMMENT = \"comment\";\nexport const PROBABLE_BILLING_DATE = \"probableBillingDate\";\nexport const COMMENT_MESSAGE = {\n  text: <IntlMessage id=\"component.manageopenpool.comment.message\" />,\n  value: \"please enter comment\",\n};\n","import moment from \"moment\";\nimport service from \"auth/FetchInterceptor\";\nimport API_CONSTANTS from \"constants/ApiConstant\";\nimport Utils from \"utils\";\nimport { ACTION } from \"constants/ManageOpenPoolContansts\";\nimport { DATE_FORMAT_DD_MM_YYYY } from \"constants/DateConstant\";\nconst manageOpenPoolService = {};\n\nmanageOpenPoolService.preparedDataForExport = (data = []) => {\n  const filtered = data.map(item => {\n    return {\n      employeeId: item.employeeId || \" \",\n      employeeName: item.employeeName || \" \",\n      functionalGroup: item.functionalGroup || \" \",\n      billableStatus: item.billableStatus || \" \",\n      previousExperience: item.previousExperience || \" \",\n      accountName: item.accountName || \"\",\n      probableBillingDetails: item.probableBillingDetails || \" \",\n      billingStartDate: moment(item.billingStartDate).format(DATE_FORMAT_DD_MM_YYYY) || \" \",\n      ProjectName: item.ProjectName || \" \",\n      subDomain: item.subDomain || \" \",\n    };\n  });\n  return filtered;\n};\nmanageOpenPoolService.preparedHeadersForPDF = (data = []) => {\n  const indexes = data.map(x => x.dataIndex);\n  const filtered = indexes.filter(x => x !== ACTION);\n  return filtered;\n};\n\nmanageOpenPoolService.getList = async function (params) {\n  const { path, method } = API_CONSTANTS.MANAGE_OPEN_POOL_RESOURCE_LIST;\n  try {\n    const response = await service({\n      url: path,\n      method,\n      params,\n    });\n    if (Utils.isEmpty(response)) {\n      return [];\n    }\n    return response;\n  } catch (e) {\n    console.error(\"Error in getting the managePool list.\", e);\n  }\n};\nmanageOpenPoolService.UpdateResource = async function (params, data) {\n  const { path, method } = API_CONSTANTS.MANAGE_OPEN_POOL_RESOURCE_UPDATE_LIST;\n  try {\n    // need to fix the PUT request at backend\n    // const response = await service({\n    //   url: path,\n    //   method,\n    //   params,\n    //   data,\n    // });\n    // if (Utils.isEmpty(response)) {\n    //   return [];\n    // }\n    // return response;\n  } catch (e) {\n    console.error(\"Error in getting the managePool list.\", e);\n  }\n};\nmanageOpenPoolService.prepareData = obj => {\n  return obj.map(el => {\n    return {\n      id: el.id,\n      employeeName: el.employeeName,\n      employeeId: el.employeeId,\n      functionalGroup: el.functionalGroup,\n      accountName: el?.accountName,\n      ProjectName: el?.ProjectName,\n      billingStartDate: el.billingStartDate,\n      probableBillingDetails: el.probableBillingDetails,\n      billableStatus: el.billableStatus,\n      projectId: el.projectId,\n      billingEndDate: el.billingEndDate,\n      Status: el.resourceStatus,\n      accountId: el.accountId,\n    };\n  });\n};\nmanageOpenPoolService.prepareRequestData = (billableStatus, probablebillingdetails, data) => {\n  const datatoupdate = data[0];\n  datatoupdate.billableStatus = billableStatus;\n  datatoupdate.probableBillingDetails = probablebillingdetails;\n  return datatoupdate;\n};\n\nexport default manageOpenPoolService;\n"],"sourceRoot":""}